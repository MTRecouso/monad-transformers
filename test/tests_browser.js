(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

exports.promise = {
  name: 'promise',
  of: function of(val) {
    return function (resolve) {
      return resolve(val);
    };
  },
  map: function map(funk, val) {
    return function (resolve) {
      val(function (value) {
        return resolve(funk(value));
      });
    };
  },

  flat: function flat(val, innerMonad) {
    return function (resolve) {
      val(function (i) {
        innerMonad.map(function (innerPromise) {
          innerPromise(function (value) {
            resolve(innerMonad.map(function () {
              return value;
            }, i));
          });
        }, i);
      });
    };
  }
};

},{}],2:[function(require,module,exports){
'use strict';

exports.id = {
  name: 'id',
  of: function of(val) {
    return { idVal: val };
  },
  map: function map(funk, val) {
    return {
      idVal: funk(val.idVal)
    };
  },
  flatMap: function flatMap(funk, val, innerMonad) {
    return innerMonad.flatMap(function (innerId) {
      return funk(innerId.idVal);
    }, val, innerMonad.inner);
  }
};

exports.maybe = {
  name: 'maybe',
  of: function of(val) {
    return { maybeVal: val };
  },
  map: function map(funk, val) {
    return {
      maybeVal: val.maybeVal === undefined ? val.maybeVal : funk(val.maybeVal)
    };
  },
  flatMap: function flatMap(funk, val, innerMonad) {
    return innerMonad.flatMap(function (innerMaybe) {
      return innerMaybe.maybeVal === undefined ? innerMaybe.maybeVal : funk(innerMaybe.maybeVal);
    }, val, innerMonad.inner);
  }
};

},{}],3:[function(require,module,exports){
'use strict';

exports.prim = require('./prim');
exports.data = require('./data');
exports.comp = require('./comp');

// The ID monad is at the bottom of each monad stack
var id = {
  of: function of(val) {
    return val;
  },
  map: function map(funk, val) {
    return funk(val);
  },
  flatMap: function flatMap(funk, val) {
    return funk(val);
  }
};

exports.make = function make_monad(m1, m2) {
  m1.inner = m2;
  m2.inner = id;
  var proto = {
    map: function map(funk) {
      return create(m2.map(function (val) {
        return m1.map(funk, val);
      }, this._value));
    },
    flatMap: function flatMap(funk) {
      var funkk = function funkk(val) {
        return funk(val)._value;
      };
      return create(m1.flatMap(funkk, this._value, m2));
    }
  };
  function create(value) {
    var obj = Object.create(proto);
    obj._value = value;
    return obj;
  }

  function make(value) {
    return create(m2.of(m1.of(value)));
  }
  make.prototype = proto;
  return make;
};

exports.print = function print(val) {
  console.log(val);return val;
};

},{"./comp":1,"./data":2,"./prim":4}],4:[function(require,module,exports){
'use strict';

exports.list = {
  name: 'list',
  of: function of(val) {
    return val.constructor === Array ? val : [val];
  },
  map: function map(funk, val) {
    return val.map(funk);
  },
  flatMap: function flatMap(funk, val, innerMonad) {
    return val.reduce(function (list, val) {
      return innerMonad.funk(val);
    }, []);
  },

  flat: function flat(val, innerMonad) {
    return val.reduce(function (list, i) {
      var index = -1;
      var over = false;
      while (!over) {
        list.push(innerMonad.map(function (innerList) {
          index++;
          if (index - 1 === innerList.length) {
            over = true;
          }
          return innerList[index];
        }, i));
      }
      return list;
    }, []);
  }

};

},{}],5:[function(require,module,exports){
'use strict';

var sonne = require('../lib/main');
module.exports = {

	maybeId: function maybeId(test) {

		var maybeId = sonne.make(sonne.data.maybe, sonne.data.id);

		maybeId(4).map(function (val) {
			return val + 1;
		}).map(function (a) {
			test.equals(a, 5, a);return a;
		}).map(function (num) {
			return undefined;
		}).map(function (a) {
			test.equals(true, false);return a;
		});

		var run = false;
		maybeId(4).flatMap(function (val) {
			return maybeId(5);
		}).map(function (val) {
			test.equals(val, 5);
			run = true;
		});
		test.equals(run, true);

		test.done();
	}

};

},{"../lib/main":3}],6:[function(require,module,exports){
(function (global){
"use strict";

exports.basic = require("./basic");

global.tests = module.exports;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./basic":5}]},{},[6])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjOi9naXQtcHJvamVjdHMvc29ubmUvbGliL2NvbXAuanMiLCJjOi9naXQtcHJvamVjdHMvc29ubmUvbGliL2RhdGEuanMiLCJjOi9naXQtcHJvamVjdHMvc29ubmUvbGliL21haW4uanMiLCJjOi9naXQtcHJvamVjdHMvc29ubmUvbGliL3ByaW0uanMiLCJjOi9naXQtcHJvamVjdHMvc29ubmUvdGVzdC9iYXNpYy5qcyIsImM6L2dpdC1wcm9qZWN0cy9zb25uZS90ZXN0L3Rlc3RzX25vZGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLE9BQU8sQ0FBQyxPQUFPLEdBQUc7QUFDaEIsTUFBSSxFQUFFLFNBQVM7QUFDZixJQUFFLEVBQUUsWUFBVSxHQUFHLEVBQUU7QUFBQyxXQUFPLFVBQVUsT0FBTyxFQUFFO0FBQUUsYUFBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7S0FBQyxDQUFBO0dBQUU7QUFDdEUsS0FBRyxFQUFFLGFBQVUsSUFBSSxFQUFFLEdBQUcsRUFBRTtBQUN4QixXQUFPLFVBQVUsT0FBTyxFQUFFO0FBQ3hCLFNBQUcsQ0FBQyxVQUFVLEtBQUssRUFBRTtBQUNuQixlQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtPQUM1QixDQUFDLENBQUE7S0FDSCxDQUFBO0dBQ0Y7O0FBRUQsTUFBSSxFQUFFLGNBQVUsR0FBRyxFQUFFLFVBQVUsRUFBRTtBQUMvQixXQUFPLFVBQVUsT0FBTyxFQUFFO0FBQ3hCLFNBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUNmLGtCQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsWUFBWSxFQUFFO0FBQ3JDLHNCQUFZLENBQUMsVUFBVSxLQUFLLEVBQUU7QUFDNUIsbUJBQU8sQ0FBQyxVQUFVLENB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QUFBOztBQUVsQyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZXhwb3J0cy5wcm9taXNlID0ge1xyXG4gIG5hbWU6ICdwcm9taXNlJyxcclxuICBvZjogZnVuY3Rpb24gKHZhbCkge3JldHVybiBmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gcmVzb2x2ZSh2YWwpfSB9LFxyXG4gIG1hcDogZnVuY3Rpb24gKGZ1bmssIHZhbCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgIHZhbChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gcmVzb2x2ZShmdW5rKHZhbHVlKSlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBmbGF0OiBmdW5jdGlvbiAodmFsLCBpbm5lck1vbmFkKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgdmFsKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgaW5uZXJNb25hZC5tYXAoZnVuY3Rpb24gKGlubmVyUHJvbWlzZSkge1xyXG4gICAgICAgICAgaW5uZXJQcm9taXNlKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXNvbHZlKGlubmVyTW9uYWQubWFwKGZ1bmN0aW9uICgpIHtyZXR1cm4gdmFsdWV9LCBpKSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSwgaSlcclxuXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydHMuaWQgPSB7XHJcbiAgbmFtZTogJ2lkJyxcclxuICBvZjogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4ge2lkVmFsOiB2YWwgfSB9LFxyXG4gIG1hcDogZnVuY3Rpb24gKGZ1bmssIHZhbCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWRWYWw6IGZ1bmsodmFsLmlkVmFsKVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgZmxhdE1hcDogZnVuY3Rpb24gKGZ1bmssIHZhbCwgaW5uZXJNb25hZCkge1xyXG4gICAgcmV0dXJuIGlubmVyTW9uYWQuZmxhdE1hcChmdW5jdGlvbiAoaW5uZXJJZCkge1xyXG4gICAgICByZXR1cm4gZnVuayhpbm5lcklkLmlkVmFsKVxyXG4gICAgfSwgdmFsLCBpbm5lck1vbmFkLmlubmVyKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0cy5tYXliZSA9IHtcclxuICBuYW1lOiAnbWF5YmUnLFxyXG4gIG9mOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiB7bWF5YmVWYWw6IHZhbCB9IH0sXHJcbiAgbWFwOiBmdW5jdGlvbiAoZnVuaywgdmFsKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgbWF5YmVWYWw6IHZhbC5tYXliZVZhbCA9PT0gdW5kZWZpbmVkID8gdmFsLm1heWJlVmFsIDogZnVuayh2YWwubWF5YmVWYWwpXHJcbiAgICB9XHJcbiAgfSxcclxuICBmbGF0TWFwOiBmdW5jdGlvbiAoZnVuaywgdmFsLCBpbm5lck1vbmFkKSB7XHJcbiAgICByZXR1cm4gaW5uZXJNb25hZC5mbGF0TWFwKGZ1bmN0aW9uIChpbm5lck1heWJlKSB7XHJcbiAgICAgIHJldHVybiBpbm5lck1heWJlLm1heWJlVmFsID09PSB1bmRlZmluZWQgPyBpbm5lck1heWJlLm1heWJlVmFsIDogZnVuayhpbm5lck1heWJlLm1heWJlVmFsKVxyXG4gICAgfSwgdmFsLCBpbm5lck1vbmFkLmlubmVyKVxyXG4gIH1cclxufVxyXG4iLCJleHBvcnRzLnByaW0gPSByZXF1aXJlKCcuL3ByaW0nKVxyXG5leHBvcnRzLmRhdGEgPSByZXF1aXJlKCcuL2RhdGEnKVxyXG5leHBvcnRzLmNvbXAgPSByZXF1aXJlKCcuL2NvbXAnKVxyXG5cclxuLy8gVGhlIElEIG1vbmFkIGlzIGF0IHRoZSBib3R0b20gb2YgZWFjaCBtb25hZCBzdGFja1xyXG52YXIgaWQgPSB7XHJcbiAgb2Y6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgIHJldHVybiB2YWxcclxuICB9LFxyXG4gIG1hcDogZnVuY3Rpb24gKGZ1bmssIHZhbCkge1xyXG4gICAgcmV0dXJuIGZ1bmsodmFsKVxyXG4gIH0sXHJcbiAgZmxhdE1hcDogZnVuY3Rpb24gKGZ1bmssIHZhbCkge1xyXG4gICAgcmV0dXJuIGZ1bmsodmFsKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0cy5tYWtlID0gZnVuY3Rpb24gbWFrZV9tb25hZCAobTEsIG0yKSB7XHJcbiAgbTEuaW5uZXIgPSBtMlxyXG4gIG0yLmlubmVyID0gaWRcclxuICB2YXIgcHJvdG8gPSB7XHJcbiAgICBtYXA6IGZ1bmN0aW9uIChmdW5rKSB7XHJcbiAgICAgIHJldHVybiBjcmVhdGUobTIubWFwKGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICByZXR1cm4gbTEubWFwKGZ1bmssIHZhbClcclxuICAgICAgfSwgdGhpcy5fdmFsdWUpKVxyXG4gICAgfSxcclxuICAgIGZsYXRNYXA6IGZ1bmN0aW9uIChmdW5rKSB7XHJcbiAgICAgIHZhciBmdW5rayA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICByZXR1cm4gZnVuayh2YWwpLl92YWx1ZVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBjcmVhdGUobTEuZmxhdE1hcChmdW5raywgdGhpcy5fdmFsdWUsIG0yKSlcclxuICAgIH1cclxuICB9XHJcbiAgZnVuY3Rpb24gY3JlYXRlICh2YWx1ZSkge1xyXG4gICAgdmFyIG9iaiA9IE9iamVjdC5jcmVhdGUocHJvdG8pXHJcbiAgICBvYmouX3ZhbHVlID0gdmFsdWVcclxuICAgIHJldHVybiBvYmpcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1ha2UgKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlKG0yLm9mKG0xLm9mKHZhbHVlKSkpXHJcbiAgfVxyXG4gIG1ha2UucHJvdG90eXBlID0gcHJvdG9cclxuICByZXR1cm4gbWFrZVxyXG59XHJcblxyXG5leHBvcnRzLnByaW50ID0gZnVuY3Rpb24gcHJpbnQgKHZhbCkge2NvbnNvbGUubG9nKHZhbCk7cmV0dXJuIHZhbH1cclxuIiwiZXhwb3J0cy5saXN0ID0ge1xyXG4gIG5hbWU6ICdsaXN0JyxcclxuICBvZjogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsLmNvbnN0cnVjdG9yID09PSBBcnJheSA/IHZhbCA6IFt2YWxdIH0sXHJcbiAgbWFwOiBmdW5jdGlvbiAoZnVuaywgdmFsKSB7XHJcbiAgICByZXR1cm4gdmFsLm1hcChmdW5rKVxyXG4gIH0sXHJcbiAgZmxhdE1hcDogZnVuY3Rpb24gKGZ1bmssIHZhbCwgaW5uZXJNb25hZCkge1xyXG4gICAgcmV0dXJuIHZhbC5yZWR1Y2UoZnVuY3Rpb24gKGxpc3QsIHZhbCkge1xyXG4gICAgICByZXR1cm4gaW5uZXJNb25hZC5mdW5rKHZhbClcclxuICAgIH0sIFtdKVxyXG4gIH0sXHJcblxyXG4gIGZsYXQ6IGZ1bmN0aW9uICh2YWwsIGlubmVyTW9uYWQpIHtcclxuICAgIHJldHVybiB2YWwucmVkdWNlKGZ1bmN0aW9uIChsaXN0LCBpKSB7XHJcbiAgICAgIHZhciBpbmRleCA9IC0xXHJcbiAgICAgIHZhciBvdmVyID0gZmFsc2VcclxuICAgICAgd2hpbGUgKCFvdmVyKSB7XHJcbiAgICAgICAgbGlzdC5wdXNoKGlubmVyTW9uYWQubWFwKGZ1bmN0aW9uIChpbm5lckxpc3QpIHtcclxuICAgICAgICAgIGluZGV4KytcclxuICAgICAgICAgIGlmIChpbmRleCAtIDEgPT09IGlubmVyTGlzdC5sZW5ndGgpIHtvdmVyID0gdHJ1ZX1cclxuICAgICAgICAgIHJldHVybiBpbm5lckxpc3RbaW5kZXhdXHJcbiAgICAgICAgfSwgaSkpXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGxpc3RcclxuICAgIH0sIFtdKVxyXG4gIH1cclxuXHJcbn1cclxuIiwidmFyIHNvbm5lID0gcmVxdWlyZSgnLi4vbGliL21haW4nKVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBcclxuICBtYXliZUlkOmZ1bmN0aW9uKHRlc3Qpe1xyXG4gIFxyXG5cdHZhciBtYXliZUlkID0gc29ubmUubWFrZShzb25uZS5kYXRhLm1heWJlLCBzb25uZS5kYXRhLmlkKVxyXG5cclxuXHRtYXliZUlkKDQpXHJcblx0ICAgIC5tYXAoZnVuY3Rpb24odmFsKXtyZXR1cm4gdmFsKzF9KVxyXG5cdCAgICAubWFwKGZ1bmN0aW9uKGEpe3Rlc3QuZXF1YWxzKGEsIDUsIGEpO3JldHVybiBhfSlcclxuXHQgICAgLm1hcChmdW5jdGlvbihudW0pe3JldHVybiB1bmRlZmluZWR9KVxyXG5cdCAgICAubWFwKGZ1bmN0aW9uKGEpe3Rlc3QuZXF1YWxzKHRydWUsIGZhbHNlKTtyZXR1cm4gYX0pXHJcblxyXG5cdHZhciBydW4gPSBmYWxzZVxyXG5cdG1heWJlSWQoNClcclxuXHQgICAgLmZsYXRNYXAoZnVuY3Rpb24odmFsKXtcclxuXHRcdHJldHVybiBtYXliZUlkKDUpXHJcblx0ICAgIH0pXHJcblx0ICAgIC5tYXAoZnVuY3Rpb24odmFsKXtcclxuXHRcdHRlc3QuZXF1YWxzKHZhbCwgNSlcclxuXHRcdHJ1biA9IHRydWVcclxuXHQgICAgfSlcclxuXHR0ZXN0LmVxdWFscyhydW4sIHRydWUpXHJcblxyXG5cdHRlc3QuZG9uZSgpXHJcblxyXG5cclxuICB9XHJcblxyXG59XHJcbiIsImV4cG9ydHMuYmFzaWMgPSByZXF1aXJlKFwiLi9iYXNpY1wiKVxyXG5cclxuZ2xvYmFsLnRlc3RzID0gbW9kdWxlLmV4cG9ydHNcclxuIl19
