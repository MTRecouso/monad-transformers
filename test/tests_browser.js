(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

exports.promise = {
  name: 'promise',
  of: function of(val) {
    return function (resolve) {
      return resolve(val);
    };
  },
  map: function map(funk, val) {
    return function (resolve) {
      val(function (value) {
        return resolve(funk(value));
      });
    };
  },

  flat: function flat(val, innerMonad) {
    return function (resolve) {
      val(function (i) {
        innerMonad.map(function (innerPromise) {
          innerPromise(function (value) {
            resolve(innerMonad.map(function () {
              return value;
            }, i));
          });
        }, i);
      });
    };
  }
};

},{}],2:[function(require,module,exports){
'use strict';

exports.prim = require('./prim');
exports.data = require('./data');
exports.comp = require('./comp');

var id = {
  flatMap: function flatMap(funk, val) {
    return funk(val);
  }

};

exports.make = function make_monad(m1, m2) {
  m1.inner = m2; // maybe
  m2.inner = id;
  var proto = {
    map: function map(funk) {
      return create(m2.map(function (val) {
        return m1.map(funk, val);
      }, this._value));
    },
    flatMap: function flatMap(funk) {
      var funkk = function funkk(val) {
        return funk(val)._value;
      };
      return create(m1.flatMap(funkk, this._value, m2));
    }
  };
  function create(value) {
    var obj = Object.create(proto);
    obj._value = value;
    return obj;
  }

  function make(value) {
    return create(m2.of(m1.of(value)));
  }
  make.prototype = proto;
  return make;
};

exports.print = function print(val) {
  console.log(val);return val;
};

},{"./comp":1,"./data":3,"./prim":4}],3:[function(require,module,exports){
'use strict';

exports.id = {
  name: 'id',
  of: function of(val) {
    return { idVal: val };
  },
  map: function map(funk, val) {
    return {
      idVal: funk(val.idVal)
    };
  },
  flatMap: function flatMap(funk, val, innerMonad) {
    return innerMonad.flatMap(function (innerId) {
      return funk(innerId.idVal);
    }, val, innerMonad.inner);
  }
};

exports.maybe = {
  name: 'maybe',
  of: function of(val) {
    return { maybeVal: val };
  },
  map: function map(funk, val) {
    return {
      maybeVal: val.maybeVal === undefined ? val.maybeVal : funk(val.maybeVal)
    };
  },
  flatMap: function flatMap(funk, val, innerMonad) {
    return innerMonad.flatMap(function (innerMaybe) {
      return innerMaybe.maybeVal === undefined ? innerMaybe.maybeVal : funk(innerMaybe.maybeVal);
    }, val, innerMonad.inner);
  }
};

},{}],4:[function(require,module,exports){
'use strict';

exports.list = {
  name: 'list',
  of: function of(val) {
    return val.constructor === Array ? val : [val];
  },
  map: function map(funk, val) {
    return val.map(funk);
  },
  flatMap: function flatMap(funk, val, innerMonad) {
    return val.reduce(function (list, val) {
      return innerMonad.funk(val);
    }, []);
  },

  flat: function flat(val, innerMonad) {
    return val.reduce(function (list, i) {
      var index = -1;
      var over = false;
      while (!over) {
        list.push(innerMonad.map(function (innerList) {
          index++;
          if (index - 1 === innerList.length) {
            over = true;
          }
          return innerList[index];
        }, i));
      }
      return list;
    }, []);
  }

};

},{}],5:[function(require,module,exports){
'use strict';

var sonne = require('../lib/core');
module.exports = {

	maybeId: function maybeId(test) {

		var maybeId = sonne.make(sonne.data.maybe, sonne.data.id);

		maybeId(4).map(function (val) {
			return val + 1;
		}).map(function (a) {
			test.equals(a, 5, a);return a;
		}).map(function (num) {
			return undefined;
		}).map(function (a) {
			test.equals(true, false);return a;
		});

		var run = false;
		maybeId(4).flatMap(function (val) {
			return maybeId(5);
		}).map(function (val) {
			test.equals(val, 5);
			run = true;
		});
		test.equals(run, true);

		test.done();
	}

};

},{"../lib/core":2}],6:[function(require,module,exports){
(function (global){
"use strict";

exports.basic = require("./basic");

global.tests = module.exports;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./basic":5}]},{},[6])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvYm9yaXNtYXJpbm92L3Nvbm5lL2xpYi9jb21wLmpzIiwiL1VzZXJzL2JvcmlzbWFyaW5vdi9zb25uZS9saWIvY29yZS5qcyIsIi9Vc2Vycy9ib3Jpc21hcmlub3Yvc29ubmUvbGliL2RhdGEuanMiLCIvVXNlcnMvYm9yaXNtYXJpbm92L3Nvbm5lL2xpYi9wcmltLmpzIiwiL1VzZXJzL2JvcmlzbWFyaW5vdi9zb25uZS90ZXN0L2Jhc2ljLmpzIiwiL1VzZXJzL2JvcmlzbWFyaW5vdi9zb25uZS90ZXN0L3Rlc3RzX25vZGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLE9BQU8sQ0FBQyxPQUFPLEdBQUc7QUFDaEIsTUFBSSxFQUFFLFNBQVM7QUFDZixJQUFFLEVBQUUsWUFBVSxHQUFHLEVBQUU7QUFBQyxXQUFPLFVBQVUsT0FBTyxFQUFFO0FBQUUsYUFBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7S0FBQyxDQUFBO0dBQUU7QUFDdEUsS0FBRyxFQUFFLGFBQVUsSUFBSSxFQUFFLEdBQUcsRUFBRTtBQUN4QixXQUFPLFVBQVUsT0FBTyxFQUFFO0FBQ3hCLFNBQUcsQ0FBQyxVQUFVLEtBQUssRUFBRTtBQUNuQixlQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtPQUM1QixDQUFDLENBQUE7S0FDSCxDQUFBO0dBQ0Y7O0FBRUQsTUFBSSxFQUFFLGNBQVUsR0FBRyxFQUFFLFVBQVUsRUFBRTtBQUMvQixXQUFPLFVBQVUsT0FBTyxFQUFFO0FBQ3hCLFNBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUNmLGtCQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsWUFBWSxFQUFFO0FBQ3JDLHNCQUFZLENBQUMsVUFBVSxLQUFLLEVBQUU7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dGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZXhwb3J0cy5wcm9taXNlID0ge1xuICBuYW1lOiAncHJvbWlzZScsXG4gIG9mOiBmdW5jdGlvbiAodmFsKSB7cmV0dXJuIGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiByZXNvbHZlKHZhbCl9IH0sXG4gIG1hcDogZnVuY3Rpb24gKGZ1bmssIHZhbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFsKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShmdW5rKHZhbHVlKSlcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuXG4gIGZsYXQ6IGZ1bmN0aW9uICh2YWwsIGlubmVyTW9uYWQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhbChmdW5jdGlvbiAoaSkge1xuICAgICAgICBpbm5lck1vbmFkLm1hcChmdW5jdGlvbiAoaW5uZXJQcm9taXNlKSB7XG4gICAgICAgICAgaW5uZXJQcm9taXNlKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShpbm5lck1vbmFkLm1hcChmdW5jdGlvbiAoKSB7cmV0dXJuIHZhbHVlfSwgaSkpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSwgaSlcblxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydHMucHJpbSA9IHJlcXVpcmUoJy4vcHJpbScpXG5leHBvcnRzLmRhdGEgPSByZXF1aXJlKCcuL2RhdGEnKVxuZXhwb3J0cy5jb21wID0gcmVxdWlyZSgnLi9jb21wJylcblxudmFyIGlkID0ge1xuICBmbGF0TWFwOiBmdW5jdGlvbiAoZnVuaywgdmFsKSB7XG4gICAgcmV0dXJuIGZ1bmsodmFsKVxuICB9XG5cbn1cblxuZXhwb3J0cy5tYWtlID0gZnVuY3Rpb24gbWFrZV9tb25hZCAobTEsIG0yKSB7XG4gIG0xLmlubmVyID0gbTIgLy8gbWF5YmVcbiAgbTIuaW5uZXIgPSBpZFxuICB2YXIgcHJvdG8gPSB7XG4gICAgbWFwOiBmdW5jdGlvbiAoZnVuaykge1xuICAgICAgcmV0dXJuIGNyZWF0ZShtMi5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gbTEubWFwKGZ1bmssIHZhbClcbiAgICAgIH0sIHRoaXMuX3ZhbHVlKSlcbiAgICB9LFxuICAgIGZsYXRNYXA6IGZ1bmN0aW9uIChmdW5rKSB7XG4gICAgICB2YXIgZnVua2sgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiBmdW5rKHZhbCkuX3ZhbHVlXG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlKG0xLmZsYXRNYXAoZnVua2ssIHRoaXMuX3ZhbHVlLCBtMikpXG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZSAodmFsdWUpIHtcbiAgICB2YXIgb2JqID0gT2JqZWN0LmNyZWF0ZShwcm90bylcbiAgICBvYmouX3ZhbHVlID0gdmFsdWVcbiAgICByZXR1cm4gb2JqXG4gIH1cblxuICBmdW5jdGlvbiBtYWtlICh2YWx1ZSkge1xuICAgIHJldHVybiBjcmVhdGUobTIub2YobTEub2YodmFsdWUpKSlcbiAgfVxuICBtYWtlLnByb3RvdHlwZSA9IHByb3RvXG4gIHJldHVybiBtYWtlXG59XG5cbmV4cG9ydHMucHJpbnQgPSBmdW5jdGlvbiBwcmludCAodmFsKSB7Y29uc29sZS5sb2codmFsKTtyZXR1cm4gdmFsfVxuIiwiZXhwb3J0cy5pZCA9IHtcbiAgbmFtZTogJ2lkJyxcbiAgb2Y6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHtpZFZhbDogdmFsIH0gfSxcbiAgbWFwOiBmdW5jdGlvbiAoZnVuaywgdmFsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkVmFsOiBmdW5rKHZhbC5pZFZhbClcbiAgICB9XG4gIH0sXG4gIGZsYXRNYXA6IGZ1bmN0aW9uIChmdW5rLCB2YWwsIGlubmVyTW9uYWQpIHtcbiAgICByZXR1cm4gaW5uZXJNb25hZC5mbGF0TWFwKGZ1bmN0aW9uIChpbm5lcklkKSB7XG4gICAgICByZXR1cm4gZnVuayhpbm5lcklkLmlkVmFsKVxuICAgIH0sIHZhbCwgaW5uZXJNb25hZC5pbm5lcilcbiAgfVxufVxuXG5leHBvcnRzLm1heWJlID0ge1xuICBuYW1lOiAnbWF5YmUnLFxuICBvZjogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4ge21heWJlVmFsOiB2YWwgfSB9LFxuICBtYXA6IGZ1bmN0aW9uIChmdW5rLCB2YWwpIHtcbiAgICByZXR1cm4ge1xuICAgIG1heWJlVmFsOiB2YWwubWF5YmVWYWwgPT09IHVuZGVmaW5lZCA/IHZhbC5tYXliZVZhbCA6IGZ1bmsodmFsLm1heWJlVmFsKVxuICAgIH1cbiAgfSxcbiAgZmxhdE1hcDogZnVuY3Rpb24gKGZ1bmssIHZhbCwgaW5uZXJNb25hZCkge1xuICAgIHJldHVybiBpbm5lck1vbmFkLmZsYXRNYXAoZnVuY3Rpb24gKGlubmVyTWF5YmUpIHtcbiAgICAgIHJldHVybiBpbm5lck1heWJlLm1heWJlVmFsID09PSB1bmRlZmluZWQgPyBpbm5lck1heWJlLm1heWJlVmFsIDogZnVuayhpbm5lck1heWJlLm1heWJlVmFsKVxuICAgIH0sIHZhbCwgaW5uZXJNb25hZC5pbm5lcilcbiAgfVxufVxuIiwiZXhwb3J0cy5saXN0ID0ge1xuICBuYW1lOiAnbGlzdCcsXG4gIG9mOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWwuY29uc3RydWN0b3IgPT09IEFycmF5ID8gdmFsIDogW3ZhbF0gfSxcbiAgbWFwOiBmdW5jdGlvbiAoZnVuaywgdmFsKSB7XG4gICAgcmV0dXJuIHZhbC5tYXAoZnVuaylcbiAgfSxcbiAgZmxhdE1hcDogZnVuY3Rpb24gKGZ1bmssIHZhbCwgaW5uZXJNb25hZCkge1xuICAgIHJldHVybiB2YWwucmVkdWNlKGZ1bmN0aW9uIChsaXN0LCB2YWwpIHtcbiAgICAgIHJldHVybiBpbm5lck1vbmFkLmZ1bmsodmFsKVxuICAgIH0sIFtdKVxuICB9LFxuXG4gIGZsYXQ6IGZ1bmN0aW9uICh2YWwsIGlubmVyTW9uYWQpIHtcbiAgICByZXR1cm4gdmFsLnJlZHVjZShmdW5jdGlvbiAobGlzdCwgaSkge1xuICAgICAgdmFyIGluZGV4ID0gLTFcbiAgICAgIHZhciBvdmVyID0gZmFsc2VcbiAgICAgIHdoaWxlICghb3Zlcikge1xuICAgICAgICBsaXN0LnB1c2goaW5uZXJNb25hZC5tYXAoZnVuY3Rpb24gKGlubmVyTGlzdCkge1xuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgICBpZiAoaW5kZXggLSAxID09PSBpbm5lckxpc3QubGVuZ3RoKSB7b3ZlciA9IHRydWV9XG4gICAgICAgICAgcmV0dXJuIGlubmVyTGlzdFtpbmRleF1cbiAgICAgICAgfSwgaSkpXG4gICAgICB9XG4gICAgICByZXR1cm4gbGlzdFxuICAgIH0sIFtdKVxuICB9XG5cbn1cbiIsInZhciBzb25uZSA9IHJlcXVpcmUoJy4uL2xpYi9jb3JlJylcbm1vZHVsZS5leHBvcnRzID0ge1xuICBcbiAgbWF5YmVJZDpmdW5jdGlvbih0ZXN0KXtcbiAgXG5cdHZhciBtYXliZUlkID0gc29ubmUubWFrZShzb25uZS5kYXRhLm1heWJlLCBzb25uZS5kYXRhLmlkKVxuXG5cdG1heWJlSWQoNClcblx0ICAgIC5tYXAoZnVuY3Rpb24odmFsKXtyZXR1cm4gdmFsKzF9KVxuXHQgICAgLm1hcChmdW5jdGlvbihhKXt0ZXN0LmVxdWFscyhhLCA1LCBhKTtyZXR1cm4gYX0pXG5cdCAgICAubWFwKGZ1bmN0aW9uKG51bSl7cmV0dXJuIHVuZGVmaW5lZH0pXG5cdCAgICAubWFwKGZ1bmN0aW9uKGEpe3Rlc3QuZXF1YWxzKHRydWUsIGZhbHNlKTtyZXR1cm4gYX0pXG5cblx0dmFyIHJ1biA9IGZhbHNlXG5cdG1heWJlSWQoNClcblx0ICAgIC5mbGF0TWFwKGZ1bmN0aW9uKHZhbCl7XG5cdFx0cmV0dXJuIG1heWJlSWQoNSlcblx0ICAgIH0pXG5cdCAgICAubWFwKGZ1bmN0aW9uKHZhbCl7XG5cdFx0dGVzdC5lcXVhbHModmFsLCA1KVxuXHRcdHJ1biA9IHRydWVcblx0ICAgIH0pXG5cdHRlc3QuZXF1YWxzKHJ1biwgdHJ1ZSlcblxuXHR0ZXN0LmRvbmUoKVxuXG5cbiAgfVxuXG59XG4iLCJleHBvcnRzLmJhc2ljID0gcmVxdWlyZShcIi4vYmFzaWNcIilcblxuZ2xvYmFsLnRlc3RzID0gbW9kdWxlLmV4cG9ydHNcbiJdfQ==
