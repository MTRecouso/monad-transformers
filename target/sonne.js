(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

exports.promise = {
  name: 'promise',
  of: function of(val) {
    return function (resolve) {
      return resolve(val);
    };
  },
  map: function map(funk, val) {
    return function (resolve) {
      val(function (value) {
        return resolve(funk(value));
      });
    };
  },

  flat: function flat(val, innerMonad) {
    return function (resolve) {
      val(function (i) {
        innerMonad.map(function (innerPromise) {
          innerPromise(function (value) {
            resolve(innerMonad.map(function () {
              return value;
            }, i));
          });
        }, i);
      });
    };
  }
};

},{}],2:[function(require,module,exports){
'use strict';

exports.prim = require('./prim');
exports.data = require('./data');
exports.comp = require('./comp');

var id = {
  flatMap: function flatMap(funk, val) {
    return funk(val);
  }

};

exports.make = function make_monad(m1, m2) {
  m1.inner = m2; // maybe
  m2.inner = id;
  var proto = {
    map: function map(funk) {
      return create(m2.map(function (val) {
        return m1.map(funk, val);
      }, this._value));
    },
    flatMap: function flatMap(funk) {
      var funkk = function funkk(val) {
        return funk(val)._value;
      };
      return create(m1.flatMap(funkk, this._value, m2));
    }
  };
  function create(value) {
    var obj = Object.create(proto);
    obj._value = value;
    return obj;
  }

  function make(value) {
    return create(m2.of(m1.of(value)));
  }
  make.prototype = proto;
  return make;
};

exports.print = function print(val) {
  console.log(val);return val;
};

},{"./comp":1,"./data":3,"./prim":4}],3:[function(require,module,exports){
'use strict';

exports.id = {
  name: 'id',
  of: function of(val) {
    return { idVal: val };
  },
  map: function map(funk, val) {
    return {
      idVal: funk(val.idVal)
    };
  },
  flatMap: function flatMap(funk, val, innerMonad) {
    return innerMonad.flatMap(function (innerId) {
      return funk(innerId.idVal);
    }, val, innerMonad.inner);
  }
};

exports.maybe = {
  name: 'maybe',
  of: function of(val) {
    return { maybeVal: val };
  },
  map: function map(funk, val) {
    return {
      maybeVal: val.maybeVal === undefined ? val.maybeVal : funk(val.maybeVal)
    };
  },
  flatMap: function flatMap(funk, val, innerMonad) {
    return innerMonad.flatMap(function (innerMaybe) {
      return innerMaybe.maybeVal === undefined ? innerMaybe.maybeVal : funk(innerMaybe.maybeVal);
    }, val, innerMonad.inner);
  }
};

},{}],4:[function(require,module,exports){
'use strict';

exports.list = {
  name: 'list',
  of: function of(val) {
    return val.constructor === Array ? val : [val];
  },
  map: function map(funk, val) {
    return val.map(funk);
  },
  flatMap: function flatMap(funk, val, innerMonad) {
    return val.reduce(function (list, val) {
      return innerMonad.funk(val);
    }, []);
  },

  flat: function flat(val, innerMonad) {
    return val.reduce(function (list, i) {
      var index = -1;
      var over = false;
      while (!over) {
        list.push(innerMonad.map(function (innerList) {
          index++;
          if (index - 1 === innerList.length) {
            over = true;
          }
          return innerList[index];
        }, i));
      }
      return list;
    }, []);
  }

};

},{}]},{},[1,2,3,4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
