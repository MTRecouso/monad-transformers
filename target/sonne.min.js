(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";exports.state={name:"State",of:function(t){var n=this;return function(r){return n.outer.of([t,r])}},chain:function(t,n){var r=this;return function(u){return r.outer.chain(function(n){var r=n[0],u=n[1];return t(r)(u)},n(u))}},lift:function(t){var n=this;return function(r){return n.outer.chain(function(t){return n.outer.of([t,r])},t)}},load:function(t){var n=this;return function(t){return n.outer.of([t,t])}},save:function(t){var n=this;return function(r){return n.outer.of([t,t])}},run:function(t,n){return this.outer.run(function(n){return t(n[0])},n())}},exports.list={name:"List",of:function(t){return this.outer.of([t])},chain:function(t,n){var r=this;return this.outer.chain(function(n){var u=n.map(t);return u.reduce(function(t,n){return r.outer.chain(function(n){return t.concat(n)},n)})},n)},lift:function(t){var n=this;return this.outer.chain(function(t){return n.outer.of([t])},t)},run:function(t,n){return this.outer.run(function(n){return n.map(t)},n)}};

},{}],2:[function(require,module,exports){
"use strict";exports.maybe={name:"Maybe",of:function(t){return this.outer.of({maybeVal:t})},chain:function(t,n){return this.outer.chain(function(n){return void 0===n.maybeVal?n:t(n.maybeVal)},n)},lift:function(t){var n=this;return this.outer.chain(function(t){return n.outer.of({maybeVal:t})},t)},run:function(t,n){return this.outer.run(function(n){return void 0===n.maybeVal?n:t(n.maybeVal)},n)},get:function(t,n){return this.of(n[t])},chainMaybe:function(t,n){return this.outer.of(t(n))}};

},{}],3:[function(require,module,exports){
"use strict";exports.idWrapped={name:"idWrapped",of:function(n){return{idContainer:this.outer.of({idVal:n})}},chain:function(n,t){return{idContainer:this.outer.chain(function(t){var i=n(t.idVal);return i.idContainer},t.idContainer)}},lift:function(n){var t=this;return{idContainer:this.outer.chain(function(n){return t.outer.of({idVal:n})},n)}},run:function(n,t){return this.outer.run(function(t){return n(t.idVal).idContainer},t.idContainer)}},exports.id={name:"ID",of:function(n){return this.outer.of({idVal:n})},chain:function(n,t){return this.outer.chain(function(t){return n(t.idVal)},t)},lift:function(n){var t=this;return this.outer.chain(function(n){return t.outer.of({idVal:n})},n)},run:function(n,t){return this.outer.run(function(t){return n(t.idVal)},t)}};

},{}],4:[function(require,module,exports){
(function (process){
"use strict";exports.prim=require("./prim"),exports.data=require("./data"),exports.comp=require("./comp");var createStack=require("./stack"),unwrap=function(r){if(!r.hasOwnProperty("_value"))throw JSON.stringify(r)+" is not a wrapped value";return r._value},wrapVal=function(r,t){var n=Object.create(r);return n._value=t,Object.freeze(n)};exports.make=function(r,t){function n(r){return wrapVal(u,r)}var e=Array.prototype.slice.call(arguments),a=createStack(e),u={prototype:u,stack:a,chain:function(r){var t=function(t){return unwrap(r(t))};return process.debug||(t.toString=function(){return"unwrap("+r.toString()+")"}),n(a.last.chain(t,this._value))},lift:function(r,t){return n(a.lift(r,t))},of:function(r){return n(a.last.of(r))},map:function(r){var t=this;return this.chain(function(n){return t.of(r(n))})},run:function(){return a.last.run(function(r){return r},this._value)}},i=function(r){Object.keys(r).filter(function(t){return"function"==typeof r[t]&&"map"!==t&&"of"!==t&&"chain"!==t&&"lift"!==t&&"run"!==t}).forEach(function(t){u["chain"+r.name]=function(t){return this.chain(function(e){var u=t(e),i=n(a.to(r,u));return i})},u[t]=function(){var e=Array.prototype.slice.call(arguments);return this.chain(function(u){return n(a.lift(r.original,r[t].apply(r,e.concat([u]))))})}})};return a._members.forEach(i),n.of=u.of,n.lift=u.lift,n};

}).call(this,require('_process'))

},{"./comp":1,"./data":2,"./prim":5,"./stack":6,"_process":7}],5:[function(require,module,exports){
"use strict";

},{}],6:[function(require,module,exports){
"use strict";module.exports=function(r){var n=new Error("The first argument must be a stack member"),t=[idProto].concat(r);t.forEach(function(r){if("object"!=typeof r)throw"Stack members must be objects"});var e=processStack(t),o=function(r,n){for(var t=!0;t;){var o=r,u=n;t=!1;var c=u+1,i=e[u+1];if(void 0===i)return o;r=i.lift(o),n=c,t=!0,c=i=void 0}},u=function(r){return function(e,o){var u=t.indexOf(e);if(-1===u)throw n;return r(o,u)}},c=function(r){return function(n,t){return e[t][r](n)}};return{lift:u(o),of:u(c("of")),chain:u(c("chain")),last:e[e.length-1],id:idProto,_members:e,run:function(r){return e[e.length-1].run(r)}}};var processStack=function(r){return stateMap(r,function(r,n){var t=n.prevItemProcessed||idProto,e=processProtoNew(r,t);return[e,{prevItemProcessed:e}]})},stateMap=function(r,n){return r.reduce(function(r,t){var e=n(t,r[1]);return[r[0].concat([e[0]]),e[1]]},[[],{}])[0]},clone=function(r){return Object.keys(r).reduce(function(n,t){return n[t]=r[t],n},{})},processProtoNew=function(r,n){var t=clone(r);return t.name=r.name+"/"+n.name,t.outer=n,t.original=r,t},idProto={name:"root",of:function(r){return r},chain:function(r,n){return r(n)},map:function(r,n){return r(n)},run:function(r,n){return r(n)}};

},{}],7:[function(require,module,exports){
function cleanUpNextTick(){draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue()}function drainQueue(){if(!draining){var e=setTimeout(cleanUpNextTick);draining=!0;for(var n=queue.length;n;){for(currentQueue=queue,queue=[];++queueIndex<n;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,n=queue.length}currentQueue=null,draining=!1,clearTimeout(e)}}function Item(e,n){this.fun=e,this.array=n}function noop(){}var process=module.exports={},queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];queue.push(new Item(e,n)),1!==queue.length||draining||setTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}]},{},[1,2,3,4,5,6])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
