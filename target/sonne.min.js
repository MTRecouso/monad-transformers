(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";exports.state={name:"State",of:function(t){var n=this;return function(r){return n.outer.of([t,r])}},chain:function(t,n){var r=this;return function(u){return r.outer.chain(function(n){var r=n[0],u=n[1];return t(r)(u)},n(u))}},lift:function(t){var n=this;return function(r){return n.outer.chain(function(t){return n.outer.of([t,r])},t)}},load:function(t){var n=this;return function(t){return n.outer.of([t,t])}},save:function(t){var n=this;return function(r){return n.outer.of([t,t])}},mapState:function(t,n){var r=this;return function(u){return r.outer.of(t(n,u))}},value:function(t,n){return this.outer.value(function(n){return t(n[0])},n())}};

},{}],2:[function(require,module,exports){
"use strict";exports.maybe={name:"Maybe",of:function(t){return this.outer.of({maybeVal:t})},chain:function(t,n){return this.outer.chain(function(n){return void 0===n.maybeVal?n:t(n.maybeVal)},n)},lift:function(t){var n=this;return this.outer.chain(function(t){return n.outer.of({maybeVal:t})},t)},value:function(t,n){return this.outer.value(function(n){return void 0===n.maybeVal?n:t(n.maybeVal)},n)},get:function(t,n){return this.of(n[t])},chainMaybe:function(t,n){return this.outer.of(t(n))}},exports.list={name:"List",of:function(t){return this.outer.of([t])},chain:function(t,n){var r=this;return console.log("list  ",n),this.outer.chain(function(n){return n.reduce(function(n,o){return r.outer.chain(function(n){return r.outer.chain(function(t){return r.outer.of(n.concat(t))},t(o))},n)},r.outer.of([]))},n)},lift:function(t){var n=this;return this.outer.chain(function(t){return n.outer.of([t])},t)},value:function(t,n){return this.outer.value(function(n){return n.map(t)},n)},filter:function(t,n){return t(n)?this.of(n):this.outer.of([])},fromArray:function(t){if(t.concat&&t.map&&t.reduce&&t.slice)return this.outer.of(t);throw t+" is not a list."}};var computeLog=function(t,n){return void 0===t?n:void 0===n?t:t.concat(n)};exports.writer={name:"Writer",of:function(t){return this.outer.of([t,void 0])},chain:function(t,n){var r=this;return console.log("writer",n),this.outer.chain(function(n){var o=n[0],u=n[1],e=t(o);return r.outer.chain(function(t){var n=t[0],o="function"==typeof t[1]?t[1](u):t[1];return r.outer.of([n,computeLog(u,o)])},e)},n)},lift:function(t){var n=this;return this.outer.chain(function(t){return n.outer.of([t,void 0])},t)},value:function(t,n){return this.outer.value(function(n){return t(n[0])},n)},tell:function(t,n){return this.outer.of([n,t])},listen:function(t,n){return this.outer.of([n,t])}};

},{}],3:[function(require,module,exports){
"use strict";exports.id={name:"Id",of:function(n){return this.outer.of({idVal:n})},chain:function(n,t){return this.outer.chain(function(t){return n(t.idVal)},t)},lift:function(n){var t=this;return this.outer.chain(function(n){return t.outer.of({idVal:n})},n)},value:function(n,t){return this.outer.value(function(t){return n(t.idVal)},t)}},exports.idWrapped={name:"IdWrapped",of:function(n){return{idContainer:this.outer.of({idVal:n})}},chain:function(n,t){return{idContainer:this.outer.chain(function(t){var i=n(t.idVal);return i.idContainer},t.idContainer)}},lift:function(n){var t=this;return{idContainer:this.outer.chain(function(n){return t.outer.of({idVal:n})},n)}},value:function(n,t){return this.outer.value(function(t){return n(t.idVal)},t.idContainer)}},exports.idMinimal={name:"idMinimal",of:function(n){return this.outer.of(n)},chain:function(n,t){return this.outer.chain(n,t)},lift:function(n){return n},value:function(n,t){return this.outer.value(n,t)}};

},{}],4:[function(require,module,exports){
(function (process){
"use strict";exports.id=require("./id"),exports.data=require("./data"),exports.comp=require("./comp");var createStack=require("./stack");Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(r){if(void 0===r||null===r)throw new TypeError("Cannot convert first argument to object");for(var t=Object(r),e=1;e<arguments.length;e++){var n=arguments[e];if(void 0!==n&&null!==n){n=Object(n);for(var a=Object.keys(n),u=0,i=a.length;i>u;u++){var o=a[u],c=Object.getOwnPropertyDescriptor(n,o);void 0!==c&&c.enumerable&&(t[o]=n[o])}}}return t}});var isReserverMonadKey=function(r){return"name"!==r&&"map"!==r&&"of"!==r&&"chain"!==r&&"lift"!==r&&"value"!==r},monadMapVals=function(r,t){return Object.keys(t).filter(isReserverMonadKey).reduce(function(e,n){return e[n]=r(t[n],t),e},{})},unwrap=function(r){if(!r.hasOwnProperty("_value"))throw JSON.stringify(r)+" is not a wrapped value";return r._value},wrapVal=function(r,t){var e=Object.create(r);return e._value=t,Object.freeze(e)};exports.make=function(){var r=createStack(Array.prototype.slice.call(arguments)),t={stack:r,chain:function(t){var e=function(r){return unwrap(t(r))};return process.debug||(e.toString=function(){return"unwrap("+t.toString()+")"}),a(r.last.chain(e,this._value))},lift:function(t,e){return a(r.lift(t,e))},of:function(t){return a(r.last.of(t))},map:function(r){var t=this;return this.chain(function(e){return t.of(r(e))})},value:function(t){return t=void 0!==t?t:function(r){return r},r.last.value(t,this._value)}},e=function(t,e){return function(){var n=Array.prototype.slice.call(arguments);return this.chain(function(u){return a(r.lift(e.original,t.apply(e,n.concat([u]))))})}},n=Object.assign.apply(null,[t].concat(r._members.map(function(r){return monadMapVals(e,r)}))),a=function(r){return wrapVal(n,r)};a.of=n.of,a.lift=n.lift;var u=function(t,e){return function(){return a(r.lift(e.original,t.apply(e,arguments)))}};return Object.assign.apply(null,[a].concat(r._members.map(function(r){return monadMapVals(u,r)})))};

}).call(this,require('_process'))

},{"./comp":1,"./data":2,"./id":3,"./stack":5,"_process":6}],5:[function(require,module,exports){
"use strict";module.exports=function(r){var t=new Error("The first argument must be a stack member"),n=[idProto].concat(r);n.forEach(function(r){if("object"!=typeof r)throw new Error("Stack members must be objects")});var e=processStack(n),o=function(r,t){for(var n=!0;n;){var o=r,c=t;u=i=void 0,n=!1;var u=c+1,i=e[c+1];if(void 0===i)return o;r=i.lift(o),t=u,n=!0}},c=function(r){return function(e,o){var c=n.indexOf(e);if(-1===c)throw t;return r(o,c)}},u=function(r){return function(t,n){return e[n][r](t)}};return{lift:c(o),of:c(u("of")),chain:c(u("chain")),last:e[e.length-1],id:idProto,_members:e}};var processStack=function(r){return stateMap(r,function(r,t){var n=t.prevItemProcessed||idProto,e=processProtoNew(r,n);return[e,{prevItemProcessed:e}]})},stateMap=function(r,t){return r.reduce(function(r,n){var e=t(n,r[1]);return[r[0].concat([e[0]]),e[1]]},[[],{}])[0]},clone=function(r){return Object.keys(r).reduce(function(t,n){return t[n]=r[n],t},{})},processProtoNew=function(r,t){var n=clone(r);return n.name=r.name+"/"+t.name,n.outer=t,n.original=r,n},idProto={name:"root",of:function(r){return r},chain:function(r,t){return r(t)},map:function(r,t){return r(t)},value:function(r,t){return r(t)}};

},{}],6:[function(require,module,exports){
function cleanUpNextTick(){draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue()}function drainQueue(){if(!draining){var e=setTimeout(cleanUpNextTick);draining=!0;for(var n=queue.length;n;){for(currentQueue=queue,queue=[];++queueIndex<n;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,n=queue.length}currentQueue=null,draining=!1,clearTimeout(e)}}function Item(e,n){this.fun=e,this.array=n}function noop(){}var process=module.exports={},queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];queue.push(new Item(e,n)),1!==queue.length||draining||setTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}]},{},[1,2,3,4,5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
