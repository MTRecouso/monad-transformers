(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";var Task=require("data.task");exports.task={of:Task.of,chain:function(n,t){return t.chain(n)},lift:Task.of,value:function(n,t){t.fork(function(n){return n},n)},fromTask:function(n){return new Task(n)},cont:function(n,t){return new Task(n(t))},rejected:Task.rejected};

},{"data.task":8}],2:[function(require,module,exports){
"use strict";exports.state={name:"State",of:function(t){var n=this;return function(r){return n.outer.of([t,r])}},chain:function(t,n){var r=this;return function(u){return r.outer.chain(function(n){var r=n[0],u=n[1];return t(r)(u)},n(u))}},lift:function(t){var n=this;return function(r){return n.outer.chain(function(t){return n.outer.of([t,r])},t)}},load:function(t){var n=this;return function(t){return n.outer.of([t,t])}},save:function(t){var n=this;return function(r){return n.outer.of([t,t])}},statefulMap:function(t,n){var r=this;return function(u){return r.outer.of(t(n,u))}},statefulChain:function(t,n){return function(r){return t(n,r)}},value:function(t,n){return this.outer.value(function(n){return t(n[0])},n())}};

},{}],3:[function(require,module,exports){
"use strict";var nothing={maybeVal:void 0};exports.maybe={name:"Maybe",of:function(t){return this.outer.of({maybeVal:t})},chain:function(t,n){return this.outer.chain(function(n){return void 0===n.maybeVal?n:t(n.maybeVal)},n)},lift:function(t){var n=this;return this.outer.chain(function(t){return n.outer.of({maybeVal:t})},t)},value:function(t,n){return this.outer.value(function(n){return void 0===n.maybeVal?n:t(n.maybeVal)},n)},get:function(t,n){return this.of(n[t])},maybeMap:function(t,n){return this.of(t(n))}},exports.list={name:"List",of:function(t){return this.outer.of([t])},chain:function(t,n){var r=this;return this.outer.chain(function(n){return 0===n.length?r.outer.of([]):n.map(t).reduce(function(t,n){return r.outer.chain(function(t){return r.outer.chain(function(n){return r.outer.of(t.concat(n))},n)},t)})},n)},lift:function(t){var n=this;return this.outer.chain(function(t){return n.outer.of([t])},t)},value:function(t,n){return this.outer.value(function(n){return n.map(t)},n)},filter:function(t,n){return t(n)?this.of(n):this.outer.of([])},fromArray:function(t){if(t.concat&&t.map&&t.reduce&&t.slice)return this.outer.of(t);throw t+" is not a list."}};var computeLog=function(t,n){return void 0===t?n:void 0===n?t:t.concat(n)};exports.writer={name:"Writer",of:function(t){return this.outer.of([t,void 0])},chain:function(t,n){var r=this;return this.outer.chain(function(n){var u=n[0],o=n[1],e=t(u);return r.outer.chain(function(t){var n=t[0],u="function"==typeof t[1]?t[1](o):t[1];return r.outer.of([n,computeLog(o,u)])},e)},n)},lift:function(t){var n=this;return this.outer.chain(function(t){return n.outer.of([t,void 0])},t)},value:function(t,n){return this.outer.value(function(n){return t(n[0])},n)},tell:function(t,n){return this.outer.of([n,t])},listen:function(t,n){return this.outer.of([n,t])}};

},{}],4:[function(require,module,exports){
"use strict";exports.idMinimal={name:"idMinimal",of:function(n){return this.outer.of(n)},chain:function(n,t){return this.outer.chain(n,t)},lift:function(n){return n},value:function(n,t){return this.outer.value(n,t)}},exports.id={name:"Id",of:function(n){return this.outer.of({idVal:n})},chain:function(n,t){return this.outer.chain(function(t){return n(t.idVal)},t)},lift:function(n){var t=this;return this.outer.chain(function(n){return t.outer.of({idVal:n})},n)},value:function(n,t){return this.outer.value(function(t){return n(t.idVal)},t)}},exports.idWrapped={name:"IdWrapped",of:function(n){return{idContainer:this.outer.of({idVal:n})}},chain:function(n,t){return{idContainer:this.outer.chain(function(t){var i=n(t.idVal);return i.idContainer},t.idContainer)}},lift:function(n){var t=this;return{idContainer:this.outer.chain(function(n){return t.outer.of({idVal:n})},n)}},value:function(n,t){return this.outer.value(function(t){return n(t.idVal)},t.idContainer)}};

},{}],5:[function(require,module,exports){
"use strict";var mtl={};mtl.make=require("./wrapper"),mtl.data=require("./data"),mtl.comp=require("./comp"),mtl.base=require("./base"),mtl.id=require("./id"),mtl.simple=mtl.make(mtl.data.maybe,mtl.data.writer),mtl.stateful=mtl.make(mtl.data.maybe,mtl.data.writer,mtl.comp.state),mtl.list=mtl.make(mtl.data.list,mtl.data.maybe,mtl.data.writer),mtl.statelist=mtl.make(mtl.data.list,mtl.data.maybe,mtl.data.writer,mtl.comp.state),mtl.advanced=mtl.make(mtl.base.task,mtl.data.maybe,mtl.data.writer,mtl.comp.state),mtl.advanced.prototype.rejectedMap=function(t){var a=this;return mtl.advanced(function(){return a._value().rejectedMap(t)})},module.exports=mtl;

},{"./base":1,"./comp":2,"./data":3,"./id":4,"./wrapper":7}],6:[function(require,module,exports){
"use strict";module.exports=function(r){var t=new Error("The first argument must be a stack member"),n=[idProto].concat(r);n.forEach(function(r){if("object"!=typeof r)throw new Error("Stack members must be objects")});var e=processStack(n),o=function(r,t){for(var n=!0;n;){var o=r,c=t;n=!1;var u=c+1,i=e[c+1];if(void 0===i)return o;r=i.lift(o),t=u,n=!0,u=i=void 0}},c=function(r){return function(e,o){var c=n.indexOf(e);if(-1===c)throw t;return r(o,c)}},u=function(r){return function(t,n){return e[n][r](t)}};return{lift:c(o),of:c(u("of")),chain:c(u("chain")),last:e[e.length-1],id:idProto,_members:e}};var processStack=function(r){return stateMap(r,function(r,t){var n=t.prevItemProcessed||idProto,e=processProtoNew(r,n);return[e,{prevItemProcessed:e}]})},stateMap=function(r,t){return r.reduce(function(r,n){var e=t(n,r[1]);return[r[0].concat([e[0]]),e[1]]},[[],{}])[0]},clone=function(r){return Object.keys(r).reduce(function(t,n){return t[n]=r[n],t},{})},processProtoNew=function(r,t){var n=clone(r);return n.name=r.name+"/"+t.name,n.outer=t,n.original=r,n},idProto={name:"root",of:function(r){return r},chain:function(r,t){return r(t)},map:function(r,t){return r(t)},value:function(r,t){return r(t)}};

},{}],7:[function(require,module,exports){
(function (process){
"use strict";var createStack=require("./stack");Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(t){if(void 0===t||null===t)throw new TypeError("Cannot convert first argument to object");for(var r=Object(t),n=1;n<arguments.length;n++){var e=arguments[n];if(void 0!==e&&null!==e){e=Object(e);for(var a=Object.keys(e),u=0,i=a.length;i>u;u++){var o=a[u],c=Object.getOwnPropertyDescriptor(e,o);void 0!==c&&c.enumerable&&(r[o]=e[o])}}}return r}});var isReserverMonadKey=function(t){return"name"!==t&&"map"!==t&&"of"!==t&&"chain"!==t&&"lift"!==t&&"value"!==t},monadMapVals=function(t,r){return Object.keys(r).filter(isReserverMonadKey).reduce(function(n,e){return n[e]=t(r[e],r),n},{})},unwrap=function(t){if(!t.hasOwnProperty("_value"))throw JSON.stringify(t)+" is not a wrapped value";return t._value},wrapVal=function(t,r){var n=Object.create(t);return n._value=r,Object.freeze(n)};module.exports=function(){var t=createStack(Array.prototype.slice.call(arguments)),r={stack:t,prototype:this.prototype,chain:function(r){var n=function(t){return unwrap(r(t))};return process.debug||(n.toString=function(){return"unwrap("+r.toString()+")"}),a(t.last.chain(n,this._value))},lift:function(r,n){return a(t.lift(r,n))},of:function(r){return a(t.last.of(r))},map:function(t){var r=this;return this.chain(function(n){return r.of(t(n))})},tap:function(t){return t(this)},value:function(r){return r=void 0!==r?r:function(t){return t},t.last.value(r,this._value)}},n=function(r,n){return function(){var e=Array.prototype.slice.call(arguments);return this.chain(function(u){return a(t.lift(n.original,r.apply(n,e.concat([u]))))})}},e=Object.assign.apply(null,[r].concat(t._members.map(function(t){return monadMapVals(n,t)}))),a=function(t){return wrapVal(e,t)};a.of=e.of,a.lift=e.lift,a.prototype=e;var u=function(r,n){return function(){return a(t.lift(n.original,r.apply(n,arguments)))}};return Object.assign.apply(null,[a].concat(t._members.map(function(t){return monadMapVals(u,t)})))};

}).call(this,require('_process'))

},{"./stack":6,"_process":10}],8:[function(require,module,exports){
module.exports=require("./task");

},{"./task":9}],9:[function(require,module,exports){
(function (process){
"use strict";function Task(n,t){this.fork=n,this.cleanup=t||function(){}}var delayed="undefined"!=typeof setImmediate?setImmediate:"undefined"!=typeof process?process.nextTick:setTimeout;module.exports=Task,Task.prototype.of=function(n){return new Task(function(t,r){return r(n)})},Task.of=Task.prototype.of,Task.prototype.rejected=function(n){return new Task(function(t){return t(n)})},Task.rejected=Task.prototype.rejected,Task.prototype.map=function(n){var t=this.fork,r=this.cleanup;return new Task(function(r,e){return t(function(n){return r(n)},function(t){return e(n(t))})},r)},Task.prototype.chain=function(n){var t=this.fork,r=this.cleanup;return new Task(function(r,e){return t(function(n){return r(n)},function(t){return n(t).fork(r,e)})},r)},Task.prototype.ap=function(n){return this.chain(function(t){return n.map(t)})},Task.prototype.concat=function(n){function t(n){o(n[0]),u(n[1])}var r=this.fork,e=n.fork,o=this.cleanup,u=n.cleanup;return new Task(function(n,o){function u(n){return function(r){return c?void 0:(c=!0,delayed(function(){t(i)}),n(r))}}var i,c=!1,a=r(u(n),u(o)),f=e(u(n),u(o));return i=[a,f]},t)},Task.empty=function(){return new Task(function(){})},Task.prototype.empty=Task.empty,Task.prototype.toString=function(){return"Task"},Task.prototype.orElse=function(n){var t=this.fork,r=this.cleanup;return new Task(function(r,e){return t(function(t){return n(t).fork(r,e)},function(n){return e(n)})},r)},Task.prototype.fold=function(n,t){var r=this.fork,e=this.cleanup;return new Task(function(e,o){return r(function(t){return o(n(t))},function(n){return o(t(n))})},e)},Task.prototype.cata=function(n){return this.fold(n.Rejected,n.Resolved)},Task.prototype.swap=function(){var n=this.fork,t=this.cleanup;return new Task(function(t,r){return n(function(n){return r(n)},function(n){return t(n)})},t)},Task.prototype.bimap=function(n,t){var r=this.fork,e=this.cleanup;return new Task(function(e,o){return r(function(t){return e(n(t))},function(n){return o(t(n))})},e)},Task.prototype.rejectedMap=function(n){var t=this.fork,r=this.cleanup;return new Task(function(r,e){return t(function(t){return r(n(t))},function(n){return e(n)})},r)};

}).call(this,require('_process'))

},{"_process":10}],10:[function(require,module,exports){
function cleanUpNextTick(){draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue()}function drainQueue(){if(!draining){var e=setTimeout(cleanUpNextTick);draining=!0;for(var n=queue.length;n;){for(currentQueue=queue,queue=[];++queueIndex<n;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,n=queue.length}currentQueue=null,draining=!1,clearTimeout(e)}}function Item(e,n){this.fun=e,this.array=n}function noop(){}var process=module.exports={},queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];queue.push(new Item(e,n)),1!==queue.length||draining||setTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}]},{},[1,2,3,4,5,6,7])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
